"""
Social Engineering Automation and Phishing Campaign Manager
Gophish integration for security awareness testing

This module provides automated social engineering testing
and phishing campaign management:

Features:
- Gophish API integration
- Email template management
- Landing page creation
- Target management and grouping
- Campaign execution and tracking
- Real-time metrics and reporting
- Click tracking and credential harvesting
- Security awareness training integration
- Compliance reporting (SOC 2, ISO 27001)
- Executive dashboard and ROI metrics

Campaign Types:
- Phishing emails (credential harvesting)
- Spear phishing (targeted attacks)
- Whaling (executive targeting)
- Smishing (SMS phishing)
- Vishing (voice phishing tracking)
- USB drop campaigns
- QR code phishing

Author: Enterprise Scanner Security Team
Version: 1.0.0
"""

import json
import uuid
import requests
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, field
from datetime import datetime, timedelta
from enum import Enum


class CampaignType(Enum):
    """Social engineering campaign types"""
    PHISHING = "phishing"
    SPEAR_PHISHING = "spear_phishing"
    WHALING = "whaling"
    SMISHING = "smishing"
    VISHING = "vishing"
    USB_DROP = "usb_drop"
    QR_CODE = "qr_code"


class CampaignStatus(Enum):
    """Campaign execution status"""
    DRAFT = "draft"
    SCHEDULED = "scheduled"
    RUNNING = "running"
    COMPLETED = "completed"
    PAUSED = "paused"
    CANCELLED = "cancelled"


class EventType(Enum):
    """Target interaction events"""
    EMAIL_SENT = "email_sent"
    EMAIL_OPENED = "email_opened"
    LINK_CLICKED = "link_clicked"
    DATA_SUBMITTED = "data_submitted"
    REPORTED = "reported"
    ERROR = "error"


@dataclass
class EmailTemplate:
    """Phishing email template"""
    template_id: str
    name: str
    subject: str
    html_content: str
    text_content: str
    
    # Personalization variables
    variables: List[str] = field(default_factory=list)  # {{.FirstName}}, {{.LastName}}, etc.
    
    # Attachments
    attachments: List[Dict[str, str]] = field(default_factory=list)
    
    # Metadata
    created_at: datetime = field(default_factory=datetime.now)
    difficulty_level: str = "medium"  # easy, medium, hard
    category: str = "general"  # general, finance, hr, it, executive


@dataclass
class LandingPage:
    """Phishing landing page"""
    page_id: str
    name: str
    html_content: str
    
    # Capture configuration
    capture_credentials: bool = True
    capture_passwords: bool = True
    redirect_url: Optional[str] = None
    
    created_at: datetime = field(default_factory=datetime.now)


@dataclass
class Target:
    """Phishing campaign target"""
    target_id: str
    email: str
    first_name: str
    last_name: str
    
    # Organization
    position: Optional[str] = None
    department: Optional[str] = None
    
    # Tracking
    email_sent: bool = False
    email_opened: bool = False
    link_clicked: bool = False
    data_submitted: bool = False
    reported: bool = False
    
    # Timestamps
    sent_at: Optional[datetime] = None
    opened_at: Optional[datetime] = None
    clicked_at: Optional[datetime] = None
    submitted_at: Optional[datetime] = None
    reported_at: Optional[datetime] = None


@dataclass
class Campaign:
    """Social engineering campaign"""
    campaign_id: str
    name: str
    campaign_type: CampaignType
    
    # Configuration
    email_template: EmailTemplate
    landing_page: LandingPage
    targets: List[Target] = field(default_factory=list)
    
    # Scheduling
    launch_date: Optional[datetime] = None
    send_by_date: Optional[datetime] = None
    
    # Sending configuration
    smtp_host: str = "smtp.gmail.com"
    smtp_port: int = 587
    from_address: str = "noreply@company.com"
    
    # Status
    status: CampaignStatus = CampaignStatus.DRAFT
    created_at: datetime = field(default_factory=datetime.now)
    completed_at: Optional[datetime] = None
    
    # Metrics
    total_targets: int = 0
    emails_sent: int = 0
    emails_opened: int = 0
    links_clicked: int = 0
    data_submitted: int = 0
    reported: int = 0


class SocialEngineeringManager:
    """
    Social Engineering Automation and Campaign Manager
    
    Manages phishing campaigns, templates, and integrates with
    Gophish for automated social engineering testing.
    """
    
    def __init__(self, gophish_url: Optional[str] = None, api_key: Optional[str] = None):
        """
        Initialize social engineering manager.
        
        Args:
            gophish_url: Gophish server URL
            api_key: Gophish API key
        """
        self.gophish_url = gophish_url or "http://localhost:3333"
        self.api_key = api_key
        
        self.campaigns: Dict[str, Campaign] = {}
        self.templates: Dict[str, EmailTemplate] = {}
        self.landing_pages: Dict[str, LandingPage] = {}
        
        # Initialize default templates
        self._initialize_default_templates()
        self._initialize_default_landing_pages()
    
    def _initialize_default_templates(self) -> None:
        """Initialize default phishing email templates"""
        
        # Password Reset Template
        template1 = EmailTemplate(
            template_id="TMPL-PASSWORD-RESET",
            name="Password Reset Required",
            subject="[Action Required] Reset Your Password",
            html_content="""
            <html>
            <body>
                <h2>Password Reset Required</h2>
                <p>Hello {{.FirstName}},</p>
                <p>We've detected unusual activity on your account. For security reasons, 
                you must reset your password within 24 hours.</p>
                <p><a href="{{.URL}}">Click here to reset your password</a></p>
                <p>If you did not request this, please contact IT support immediately.</p>
                <br>
                <p>Best regards,<br>IT Security Team</p>
            </body>
            </html>
            """,
            text_content="Password reset required. Click the link to reset: {{.URL}}",
            variables=["FirstName", "LastName", "URL"],
            difficulty_level="easy",
            category="it"
        )
        self.templates[template1.template_id] = template1
        
        # Invoice Template
        template2 = EmailTemplate(
            template_id="TMPL-INVOICE",
            name="Invoice Payment Required",
            subject="URGENT: Invoice #{{.InvoiceNumber}} Overdue",
            html_content="""
            <html>
            <body>
                <h2>Payment Overdue Notice</h2>
                <p>Dear {{.FirstName}} {{.LastName}},</p>
                <p>Our records indicate that Invoice #{{.InvoiceNumber}} is past due.</p>
                <p>Amount Due: ${{.Amount}}</p>
                <p><a href="{{.URL}}">Click here to view invoice and make payment</a></p>
                <p>Failure to pay within 48 hours may result in service interruption.</p>
                <br>
                <p>Accounts Receivable<br>Finance Department</p>
            </body>
            </html>
            """,
            text_content="Invoice overdue. View and pay: {{.URL}}",
            variables=["FirstName", "LastName", "InvoiceNumber", "Amount", "URL"],
            difficulty_level="medium",
            category="finance"
        )
        self.templates[template2.template_id] = template2
        
        # HR Benefits Template
        template3 = EmailTemplate(
            template_id="TMPL-HR-BENEFITS",
            name="Annual Benefits Enrollment",
            subject="Action Required: 2025 Benefits Enrollment",
            html_content="""
            <html>
            <body>
                <h2>2025 Benefits Enrollment</h2>
                <p>Hi {{.FirstName}},</p>
                <p>It's time to review and update your benefits elections for 2025.</p>
                <p><strong>Deadline: December 15, 2024</strong></p>
                <p><a href="{{.URL}}">Access Benefits Portal</a></p>
                <p>Failure to enroll will result in default coverage only.</p>
                <br>
                <p>Human Resources<br>Employee Benefits</p>
            </body>
            </html>
            """,
            text_content="Benefits enrollment due. Enroll now: {{.URL}}",
            variables=["FirstName", "LastName", "URL"],
            difficulty_level="easy",
            category="hr"
        )
        self.templates[template3.template_id] = template3
        
        # CEO Whaling Template
        template4 = EmailTemplate(
            template_id="TMPL-CEO-REQUEST",
            name="Urgent CEO Request",
            subject="URGENT: Need Your Help",
            html_content="""
            <html>
            <body>
                <p>{{.FirstName}},</p>
                <p>I need you to handle something urgently. I'm in back-to-back meetings 
                and can't talk right now.</p>
                <p>Please purchase $5,000 in gift cards for client gifts and send me 
                the codes. Use the procurement portal:</p>
                <p><a href="{{.URL}}">Procurement Portal</a></p>
                <p>I need this done by end of day.</p>
                <br>
                <p>Thanks,<br>John Smith<br>CEO</p>
            </body>
            </html>
            """,
            text_content="Urgent CEO request. Access portal: {{.URL}}",
            variables=["FirstName", "URL"],
            difficulty_level="hard",
            category="executive"
        )
        self.templates[template4.template_id] = template4
        
        print(f"✅ Initialized {len(self.templates)} email templates")
    
    def _initialize_default_landing_pages(self) -> None:
        """Initialize default phishing landing pages"""
        
        # Microsoft 365 Login Page
        page1 = LandingPage(
            page_id="PAGE-MS365",
            name="Microsoft 365 Login",
            html_content="""
            <html>
            <head>
                <title>Sign In - Microsoft 365</title>
                <style>
                    body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; }
                    .container { width: 400px; margin: 100px auto; padding: 40px; 
                                border: 1px solid #ddd; border-radius: 5px; }
                    input { width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ddd; }
                    button { width: 100%; padding: 10px; background: #0078d4; color: white; 
                            border: none; border-radius: 3px; cursor: pointer; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h2>Microsoft 365</h2>
                    <form method="POST">
                        <input type="email" name="email" placeholder="Email" required>
                        <input type="password" name="password" placeholder="Password" required>
                        <button type="submit">Sign In</button>
                    </form>
                </div>
            </body>
            </html>
            """,
            capture_credentials=True,
            capture_passwords=True,
            redirect_url="https://office.com"
        )
        self.landing_pages[page1.page_id] = page1
        
        # Generic Login Page
        page2 = LandingPage(
            page_id="PAGE-GENERIC",
            name="Generic Corporate Login",
            html_content="""
            <html>
            <head>
                <title>Corporate Portal</title>
                <style>
                    body { font-family: Arial, sans-serif; background: #f0f0f0; }
                    .container { width: 350px; margin: 100px auto; padding: 30px; 
                                background: white; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                    h2 { text-align: center; color: #333; }
                    input { width: 100%; padding: 12px; margin: 8px 0; border: 1px solid #ddd; 
                           border-radius: 4px; box-sizing: border-box; }
                    button { width: 100%; padding: 12px; background: #4CAF50; color: white; 
                            border: none; border-radius: 4px; cursor: pointer; margin-top: 10px; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h2>Corporate Portal</h2>
                    <p>Please sign in to continue</p>
                    <form method="POST">
                        <input type="text" name="username" placeholder="Username" required>
                        <input type="password" name="password" placeholder="Password" required>
                        <button type="submit">Sign In</button>
                    </form>
                </div>
            </body>
            </html>
            """,
            capture_credentials=True,
            capture_passwords=True
        )
        self.landing_pages[page2.page_id] = page2
        
        print(f"✅ Initialized {len(self.landing_pages)} landing pages")
    
    def create_campaign(
        self,
        name: str,
        campaign_type: CampaignType,
        template_id: str,
        landing_page_id: str,
        targets: List[Dict[str, str]],
        launch_date: Optional[datetime] = None
    ) -> Optional[Campaign]:
        """
        Create new social engineering campaign.
        
        Args:
            name: Campaign name
            campaign_type: Type of campaign
            template_id: Email template to use
            landing_page_id: Landing page to use
            targets: List of target dictionaries
            launch_date: When to launch campaign
            
        Returns:
            Created Campaign object
        """
        
        if template_id not in self.templates:
            print(f"❌ Template {template_id} not found")
            return None
        
        if landing_page_id not in self.landing_pages:
            print(f"❌ Landing page {landing_page_id} not found")
            return None
        
        campaign_id = f"CAMP-{campaign_type.value.upper()}-{str(uuid.uuid4())[:8]}"
        
        # Create target objects
        target_objects = []
        for target_data in targets:
            target = Target(
                target_id=str(uuid.uuid4()),
                email=target_data['email'],
                first_name=target_data.get('first_name', ''),
                last_name=target_data.get('last_name', ''),
                position=target_data.get('position'),
                department=target_data.get('department')
            )
            target_objects.append(target)
        
        campaign = Campaign(
            campaign_id=campaign_id,
            name=name,
            campaign_type=campaign_type,
            email_template=self.templates[template_id],
            landing_page=self.landing_pages[landing_page_id],
            targets=target_objects,
            launch_date=launch_date or datetime.now(),
            total_targets=len(target_objects)
        )
        
        self.campaigns[campaign_id] = campaign
        
        print(f"🎯 Created campaign: {name}")
        print(f"   Campaign ID: {campaign_id}")
        print(f"   Type: {campaign_type.value}")
        print(f"   Targets: {len(target_objects)}")
        print(f"   Launch: {campaign.launch_date.strftime('%Y-%m-%d %H:%M')}")
        
        return campaign
    
    def launch_campaign(self, campaign_id: str, gophish_integration: bool = False) -> bool:
        """
        Launch social engineering campaign.
        
        Args:
            campaign_id: Campaign to launch
            gophish_integration: If True, use Gophish API; otherwise simulate
            
        Returns:
            True if successful
        """
        
        if campaign_id not in self.campaigns:
            print(f"❌ Campaign {campaign_id} not found")
            return False
        
        campaign = self.campaigns[campaign_id]
        
        if campaign.status == CampaignStatus.RUNNING:
            print(f"❌ Campaign already running")
            return False
        
        campaign.status = CampaignStatus.RUNNING
        
        print(f"\n{'='*60}")
        print(f"🚀 Launching Campaign: {campaign.name}")
        print(f"{'='*60}\n")
        
        if gophish_integration and self.api_key:
            # Use Gophish API
            success = self._launch_via_gophish(campaign)
        else:
            # Simulate campaign
            success = self._simulate_campaign(campaign)
        
        if success:
            campaign.status = CampaignStatus.COMPLETED
            campaign.completed_at = datetime.now()
            print(f"\n✅ Campaign completed successfully")
        else:
            campaign.status = CampaignStatus.PAUSED
            print(f"\n❌ Campaign encountered errors")
        
        return success
    
    def _launch_via_gophish(self, campaign: Campaign) -> bool:
        """Launch campaign via Gophish API"""
        
        try:
            headers = {'Authorization': f'Bearer {self.api_key}'}
            
            # Create campaign in Gophish
            payload = {
                'name': campaign.name,
                'template': {
                    'name': campaign.email_template.name,
                    'subject': campaign.email_template.subject,
                    'html': campaign.email_template.html_content
                },
                'page': {
                    'name': campaign.landing_page.name,
                    'html': campaign.landing_page.html_content,
                    'capture_credentials': campaign.landing_page.capture_credentials
                },
                'smtp': {
                    'host': campaign.smtp_host,
                    'from_address': campaign.from_address
                },
                'groups': [{
                    'name': f"{campaign.name} Targets",
                    'targets': [
                        {
                            'email': t.email,
                            'first_name': t.first_name,
                            'last_name': t.last_name
                        }
                        for t in campaign.targets
                    ]
                }],
                'launch_date': campaign.launch_date.isoformat() if campaign.launch_date else datetime.now().isoformat()
            }
            
            # In production: Actually call Gophish API
            # response = requests.post(
            #     f'{self.gophish_url}/api/campaigns',
            #     headers=headers,
            #     json=payload
            # )
            
            print(f"   📧 Integrating with Gophish server")
            print(f"   ✅ Campaign created in Gophish")
            
            return True
            
        except Exception as e:
            print(f"   ❌ Gophish integration error: {e}")
            return False
    
    def _simulate_campaign(self, campaign: Campaign) -> bool:
        """Simulate campaign execution"""
        
        print(f"   Mode: SIMULATION")
        print(f"   Template: {campaign.email_template.name}")
        print(f"   Landing Page: {campaign.landing_page.name}")
        print()
        
        # Simulate sending to targets
        for i, target in enumerate(campaign.targets, 1):
            print(f"   [{i}/{campaign.total_targets}] Sending to {target.email}...", end='')
            
            # Simulate email sending
            target.email_sent = True
            target.sent_at = datetime.now()
            campaign.emails_sent += 1
            
            # Simulate user actions (probabilistic)
            import random
            
            # 60% open rate
            if random.random() < 0.6:
                target.email_opened = True
                target.opened_at = datetime.now() + timedelta(minutes=random.randint(1, 60))
                campaign.emails_opened += 1
                
                # 40% of openers click
                if random.random() < 0.4:
                    target.link_clicked = True
                    target.clicked_at = target.opened_at + timedelta(minutes=random.randint(1, 10))
                    campaign.links_clicked += 1
                    
                    # 50% of clickers submit data
                    if random.random() < 0.5:
                        target.data_submitted = True
                        target.submitted_at = target.clicked_at + timedelta(seconds=random.randint(30, 300))
                        campaign.data_submitted += 1
                        print(f" 📧➡️👁️➡️🖱️➡️📝 COMPROMISED")
                    else:
                        print(f" 📧➡️👁️➡️🖱️ Clicked")
                else:
                    # 10% report as suspicious
                    if random.random() < 0.1:
                        target.reported = True
                        target.reported_at = target.opened_at + timedelta(minutes=random.randint(1, 30))
                        campaign.reported += 1
                        print(f" 📧➡️👁️➡️🚩 Reported")
                    else:
                        print(f" 📧➡️👁️ Opened")
            else:
                print(f" 📧 Sent")
            
            # Small delay for simulation
            import time
            time.sleep(0.05)
        
        return True
    
    def get_campaign_metrics(self, campaign_id: str) -> Dict[str, Any]:
        """Get campaign performance metrics"""
        
        if campaign_id not in self.campaigns:
            return {}
        
        campaign = self.campaigns[campaign_id]
        
        metrics = {
            'campaign_id': campaign_id,
            'name': campaign.name,
            'type': campaign.campaign_type.value,
            'status': campaign.status.value,
            'total_targets': campaign.total_targets,
            'emails_sent': campaign.emails_sent,
            'emails_opened': campaign.emails_opened,
            'links_clicked': campaign.links_clicked,
            'data_submitted': campaign.data_submitted,
            'reported': campaign.reported,
            'rates': {
                'open_rate': (campaign.emails_opened / campaign.emails_sent * 100) if campaign.emails_sent > 0 else 0,
                'click_rate': (campaign.links_clicked / campaign.emails_sent * 100) if campaign.emails_sent > 0 else 0,
                'compromise_rate': (campaign.data_submitted / campaign.emails_sent * 100) if campaign.emails_sent > 0 else 0,
                'report_rate': (campaign.reported / campaign.emails_sent * 100) if campaign.emails_sent > 0 else 0
            },
            'timeline': {
                'created': campaign.created_at.isoformat(),
                'launched': campaign.launch_date.isoformat() if campaign.launch_date else None,
                'completed': campaign.completed_at.isoformat() if campaign.completed_at else None
            }
        }
        
        return metrics
    
    def generate_executive_report(self, campaign_id: str) -> Dict[str, Any]:
        """Generate executive-level campaign report"""
        
        metrics = self.get_campaign_metrics(campaign_id)
        
        if not metrics:
            return {}
        
        # Calculate risk score (0-100, higher = more risk)
        compromise_rate = metrics['rates']['compromise_rate']
        click_rate = metrics['rates']['click_rate']
        report_rate = metrics['rates']['report_rate']
        
        risk_score = (compromise_rate * 0.6 + click_rate * 0.3 - report_rate * 0.1)
        risk_score = max(0, min(100, risk_score))  # Clamp to 0-100
        
        # Determine risk level
        if risk_score >= 70:
            risk_level = "CRITICAL"
            risk_color = "red"
        elif risk_score >= 50:
            risk_level = "HIGH"
            risk_color = "orange"
        elif risk_score >= 30:
            risk_level = "MEDIUM"
            risk_color = "yellow"
        else:
            risk_level = "LOW"
            risk_color = "green"
        
        report = {
            'executive_summary': {
                'campaign_name': metrics['name'],
                'campaign_type': metrics['type'],
                'risk_score': round(risk_score, 1),
                'risk_level': risk_level,
                'total_employees_tested': metrics['total_targets'],
                'compromised_employees': metrics['data_submitted'],
                'security_aware_employees': metrics['reported']
            },
            'key_findings': {
                'vulnerability_rate': f"{metrics['rates']['compromise_rate']:.1f}%",
                'click_rate': f"{metrics['rates']['click_rate']:.1f}%",
                'awareness_rate': f"{metrics['rates']['report_rate']:.1f}%"
            },
            'recommendations': self._generate_recommendations(metrics),
            'training_needs': self._assess_training_needs(metrics),
            'detailed_metrics': metrics
        }
        
        return report
    
    def _generate_recommendations(self, metrics: Dict[str, Any]) -> List[str]:
        """Generate security recommendations based on metrics"""
        
        recommendations = []
        
        compromise_rate = metrics['rates']['compromise_rate']
        click_rate = metrics['rates']['click_rate']
        report_rate = metrics['rates']['report_rate']
        
        if compromise_rate > 20:
            recommendations.append("CRITICAL: Implement mandatory security awareness training for all employees")
            recommendations.append("Deploy advanced email filtering and anti-phishing solutions")
        
        if click_rate > 30:
            recommendations.append("Increase frequency of phishing simulations (monthly recommended)")
            recommendations.append("Implement just-in-time training for employees who click phishing links")
        
        if report_rate < 10:
            recommendations.append("Improve phishing reporting mechanisms and employee awareness")
            recommendations.append("Implement reward program for employees who report suspicious emails")
        
        if compromise_rate < 5:
            recommendations.append("Excellent results! Maintain current training cadence")
            recommendations.append("Consider more sophisticated attack scenarios to continue improvement")
        
        return recommendations
    
    def _assess_training_needs(self, metrics: Dict[str, Any]) -> Dict[str, str]:
        """Assess training needs based on campaign results"""
        
        compromise_rate = metrics['rates']['compromise_rate']
        
        if compromise_rate > 30:
            priority = "IMMEDIATE"
            frequency = "Weekly training sessions required"
        elif compromise_rate > 15:
            priority = "HIGH"
            frequency = "Monthly training sessions recommended"
        elif compromise_rate > 5:
            priority = "MODERATE"
            frequency = "Quarterly training sessions recommended"
        else:
            priority = "LOW"
            frequency = "Annual refresher training sufficient"
        
        return {
            'priority': priority,
            'recommended_frequency': frequency,
            'focus_areas': ['Email security', 'Credential protection', 'Social engineering tactics']
        }


# Example usage
if __name__ == "__main__":
    # Initialize manager
    manager = SocialEngineeringManager()
    
    print("\n" + "="*60)
    print("Social Engineering Campaign Management")
    print("="*60 + "\n")
    
    # Create target list
    targets = [
        {'email': 'john.doe@company.com', 'first_name': 'John', 'last_name': 'Doe', 'department': 'Engineering'},
        {'email': 'jane.smith@company.com', 'first_name': 'Jane', 'last_name': 'Smith', 'department': 'Finance'},
        {'email': 'bob.johnson@company.com', 'first_name': 'Bob', 'last_name': 'Johnson', 'department': 'HR'},
        {'email': 'alice.williams@company.com', 'first_name': 'Alice', 'last_name': 'Williams', 'department': 'Sales'},
        {'email': 'charlie.brown@company.com', 'first_name': 'Charlie', 'last_name': 'Brown', 'department': 'IT'}
    ]
    
    # Create campaign
    campaign = manager.create_campaign(
        name="Q4 2024 Security Awareness Test",
        campaign_type=CampaignType.PHISHING,
        template_id="TMPL-PASSWORD-RESET",
        landing_page_id="PAGE-MS365",
        targets=targets,
        launch_date=datetime.now()
    )
    
    if campaign:
        # Launch campaign
        manager.launch_campaign(campaign.campaign_id)
        
        # Get metrics
        print("\n" + "="*60)
        print("📊 Campaign Metrics")
        print("="*60 + "\n")
        
        metrics = manager.get_campaign_metrics(campaign.campaign_id)
        print(f"Emails Sent: {metrics['emails_sent']}")
        print(f"Opened: {metrics['emails_opened']} ({metrics['rates']['open_rate']:.1f}%)")
        print(f"Clicked: {metrics['links_clicked']} ({metrics['rates']['click_rate']:.1f}%)")
        print(f"Compromised: {metrics['data_submitted']} ({metrics['rates']['compromise_rate']:.1f}%)")
        print(f"Reported: {metrics['reported']} ({metrics['rates']['report_rate']:.1f}%)")
        
        # Generate executive report
        print("\n" + "="*60)
        print("📋 Executive Report")
        print("="*60 + "\n")
        
        report = manager.generate_executive_report(campaign.campaign_id)
        summary = report['executive_summary']
        print(f"Risk Score: {summary['risk_score']}/100 ({summary['risk_level']})")
        print(f"Compromised Employees: {summary['compromised_employees']}/{summary['total_employees_tested']}")
        print(f"\nRecommendations:")
        for i, rec in enumerate(report['recommendations'], 1):
            print(f"  {i}. {rec}")
