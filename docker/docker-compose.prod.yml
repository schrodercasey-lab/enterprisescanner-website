version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: enterprisescanner_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ../website:/usr/share/nginx/html:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - enterprise_chat_system
      - interactive_security_assessment
      - advanced_analytics_dashboard
      - api_documentation_portal
      - partner_portal_system
      - client_onboarding_automation
      - performance_monitoring_system
    networks:
      - enterprisescanner_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: enterprisescanner_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-enterprisescanner}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - enterprisescanner_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: enterprisescanner_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    networks:
      - enterprisescanner_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Enterprise Chat System
  enterprise_chat_system:
    build:
      context: ..
      dockerfile: docker/Dockerfile.chat
    container_name: enterprisescanner_chat
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/${POSTGRES_DB:-enterprisescanner}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-change_this_secret_key_in_production}
      - GUNICORN_WORKERS=4
      - GUNICORN_THREADS=2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - enterprisescanner_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Interactive Security Assessment
  interactive_security_assessment:
    build:
      context: ..
      dockerfile: docker/Dockerfile.assessment
    container_name: enterprisescanner_assessment
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/${POSTGRES_DB:-enterprisescanner}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/1
      - SECRET_KEY=${SECRET_KEY:-change_this_secret_key_in_production}
      - GUNICORN_WORKERS=4
      - GUNICORN_THREADS=2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - enterprisescanner_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Advanced Analytics Dashboard
  advanced_analytics_dashboard:
    build:
      context: ..
      dockerfile: docker/Dockerfile.analytics
    container_name: enterprisescanner_analytics
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/${POSTGRES_DB:-enterprisescanner}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/2
      - SECRET_KEY=${SECRET_KEY:-change_this_secret_key_in_production}
      - GUNICORN_WORKERS=4
      - GUNICORN_THREADS=2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - enterprisescanner_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Documentation Portal
  api_documentation_portal:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api_docs
    container_name: enterprisescanner_api_docs
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/${POSTGRES_DB:-enterprisescanner}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/3
      - SECRET_KEY=${SECRET_KEY:-change_this_secret_key_in_production}
      - GUNICORN_WORKERS=3
      - GUNICORN_THREADS=2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - enterprisescanner_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Partner Portal System
  partner_portal_system:
    build:
      context: ..
      dockerfile: docker/Dockerfile.partner
    container_name: enterprisescanner_partner
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/${POSTGRES_DB:-enterprisescanner}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/4
      - SECRET_KEY=${SECRET_KEY:-change_this_secret_key_in_production}
      - GUNICORN_WORKERS=3
      - GUNICORN_THREADS=2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - enterprisescanner_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Client Onboarding Automation
  client_onboarding_automation:
    build:
      context: ..
      dockerfile: docker/Dockerfile.onboarding
    container_name: enterprisescanner_onboarding
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/${POSTGRES_DB:-enterprisescanner}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/5
      - SECRET_KEY=${SECRET_KEY:-change_this_secret_key_in_production}
      - GUNICORN_WORKERS=3
      - GUNICORN_THREADS=2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - enterprisescanner_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Performance Monitoring System
  performance_monitoring_system:
    build:
      context: ..
      dockerfile: docker/Dockerfile.monitoring
    container_name: enterprisescanner_monitoring
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/${POSTGRES_DB:-enterprisescanner}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379/6
      - SECRET_KEY=${SECRET_KEY:-change_this_secret_key_in_production}
      - GUNICORN_WORKERS=3
      - GUNICORN_THREADS=2
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - enterprisescanner_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  enterprisescanner_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
